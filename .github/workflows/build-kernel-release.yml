name: Build and Release Sultan Kernels

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
        
jobs:
  #build-kernel-gs201:
  #  uses: ./.github/workflows/sultan.yml
  #  secrets: inherit
  #  with:
  #    codename: "gs201"
  #    repo: "android_kernel_google_gs201"
  #    android_version: "android13"
  #    kernel_version: "5.10"
      
  build-kernel-zuma:
    uses: ./.github/workflows/sultan.yml
    secrets: inherit
    with:
      codename: "zuma"
      repo: "android_kernel_google_zuma"
      android_version: "android14"
      kernel_version: "6.1"

  build-kernel-zumapro:
    uses: ./.github/workflows/sultan.yml
    secrets: inherit
    with:
      codename: "zumapro"
      repo: "android_kernel_google_zumapro"
      android_version: "android14"
      kernel_version: "6.1"

  trigger-release:
    runs-on: ubuntu-latest
    needs:
       # - build-kernel-gs201
        - build-kernel-zuma
        - build-kernel-zumapro
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: TheWildJames
      REPO_NAME: Sultan_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "Sultan Kernels With KernelSU Next & SUSFS v1.5.9"
      RELEASE_NOTES: |
        This release contains KernelSU Next and SUSFS v1.5.9
        
        Module: 
        -> https://github.com/sidex15/ksu_module_susfs
        
        Non-Official Managers:
        -> https://github.com/KernelSU-Next/KernelSU-Next

        - ‼️ The AnyKernel3 archive is the original one from WildKernels. Therefore, the info log shown in KernelFlasher during installation will be outdated, but this can be safely ignored.
        - ‼️ Kernel by Sultan (build: 07-May-2025).

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the Latest Tag from GitHub
      - name: Set Fixed Tag
        run: |
          NEW_TAG="1.5.9-R20"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG
            
      # Download Artifacts for A12 (Only if A12 Build is successful or input is true or empty)
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag for the release
          prerelease: false  # Mark the release as a pre-release
          release_name: ${{ env.RELEASE_NAME }}  # Pass the RELEASE_NAME to the action
          body: ${{ env.RELEASE_NOTES }}  # Pass the RELEASE_NOTES to the action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ env.NEW_TAG }}


      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
